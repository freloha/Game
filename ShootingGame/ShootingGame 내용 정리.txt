Attack.cs
1. OnTriggerEnter2D(Collider2D collision) <- using UnityEngine;
- 오브젝트간 충돌이 일어날 때, 처음 한번만 호출

2. Destroy(object)와 Initiate(object)
- Destroy는 오브젝트를 삭제, Initiate는 오브젝트를 생성


ButtonEvent.cs
1. SceneLoader(string sceneName) <- using UnityEngine
SceneManager.LoadScene(sceneName) <- using UnityEngine.SceneManagement
- sceneName이라는 scene으로 이동


Enemy.cs
1. [SerializeField]
- private, public 은 외부 스크립트에서 접근은 불가능, 가능하게 만들고 SerializeField는 인스펙터에서 접근 가능하게 함
2. Awake()와 Start()
- Awake는 게임이 시작되기 전에, 모든 변수와 게임의 상태를 초기화하기 위해 호출됨
- Start보다 먼저 호출되며, C++로 치면 생성자 역할과 비슷하다
- Start는 Upate메소드가 호출되기 전에 바로 호출되고 해당 Behaviour 주기 동안 한번 호출 됨
- Awake() -> Start() -> Update() 순으로 호출
3. OnDie
- 적이 죽었을 시 호출되는 함수


EnemySpawner.cs
StartCoroutine에 대하여
- Coroutine은 IEnumerator 함수에 의해 실행된다
- Update()는 매 프레임마다 호출한다. 만일 Update()에 시간 조건을 건 실행을 한다면 기기 성능에 따라 프레임 드랍(Frame Drop)이 발생할 수 있음
- 이 때, 코루틴(Coroutine)을 사용하면, 프레임 드랍 없이 시간 조건에 맞게 함수 호출이 가능함

Meteorite.cs
1. OnTriggerEnter2D(Collider2D collision) // Collider는 충돌에 관련된 컴포넌트, Rigidbody는 물리적 현상에 대한 컴포넌트
- collision.CompareTag(태그이름) -> 각 오브젝트마다 태그를 달 수 있는데 충돌이 일어난 오브젝트의 태그가 해당 태그인지 비교하기 위한 함수

MeteoriteSpawner.cs
1. Initiate(original, position, rotation)
original - 생성할 게임 오브젝트
position - vector3 변수로 생성될 게임오브젝트 위치를 지정
rotation - Quaternion변수로 생성될 게임 오브젝트의 회전값을 지정
ex) Quaternion.identity = 회전할 필요가 없는 경우

2. yield return null = 1프레임을 호출자에게 양보, update() 함수가 실행된 후 실행하라는 뜻
yield return은 여러 개 사용할 수 있으며 순차적으로 반환값을 반환

3. Random.Range(min, max)
min~max 사이의 랜덤 변수 발생


Movement2D.cs
1. Time.deltaTime
- 컴퓨터마다 초당 프레임이 다른데 각기 다른 프레임의 컴퓨터들의 값을 보정해주는 기능
- 초당 10프레임인 컴퓨터와 초당 20프레임인 컴퓨터에서 총알을 쏘는 게임을 했을 때, 10프레임 컴퓨터는 1/10, 20 프레임 컴퓨터는 1/20을 해줌으로써 결과적으로는 같은 거리만큼 총알이 날라가도록 보정해준다.(단, 10프레임 컴퓨터에서는 20프레임 컴퓨터보다 총알이 날라가는게 끊겨보일 수 있음)

2. KeyCode.(키)
- 키보드의 키에 대한 인스턴스
- Input.GetKeyDown(키)와 사용하여 눌렸을때, Input.GetKeyUp(키)로 누른 후 땠을 때에 대한 조건문 사용 가능


PlayerController.cs
1. Input.GetAxisRaw("Horizental, Vertical");
Horizental은 x축, Vertical은 Y축의 값을 의미한다.

2. Mathf.Clamp(float a, float min, float max) : a가 min보다 작다면 min, max보다 크면 max, 그 사이라면 그 값을 반환

PlayerViewer.cs
1. Slider의 Value는 해당 값만큼의 비율을 막대기(바)에 표시해준다.


PlayMove.cs
1. tr.Translate(vector2);
움직이고자 하는 위치 값을 가진 vector2를 이용해 Transform 컴포넌트로 오브젝트 이동


PlayerScoreViewer.cs
1. UGUI = Unity Graphic User Interface
유니티 엔진에서 제공하는 그래픽 UI
TextMeshProUGUI는 텍스트 값을 박스에 표시하는 GUI중 하나
TextMeshProUGUI.text = "입력값";


PositionScroller.cs
배경화면이 계속해서 움직이는 것을 표현해주는 스크립트


resultScoreViewer.cs
PlayerPrfs = 유니티에서 제공해주는 데이터 관리 클래스
특정 키값을 삭제 가능하며, 지정한 키의 값(int, string,float)을 호출할 수 있음
서버 저장과는 다르게 클라이언트의 단말에 저장


Twinkle.cs
1. spriteRenderer
SpriteRenderer.color.a = 오브젝트의 선명도